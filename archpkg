#!/usr/bin/env python3
import subprocess as sb
import os
from colorama import Fore, Style, init
import sys

# Initialize colorama
init()
pm_add_options = ["--pacmaninstall", "--aurinstall", "--flatpakinstall"]
commands = ["install", "remove", "update", "applist", "help"] + pm_add_options
archpkg_ver = "1.0.35"

def dot_desktop_gen(name, exec, icon):
    return """
[Desktop Entry]
Name={}
Exec='{}'
Icon={}
Type=Application
""".format(name, exec, icon)

def get_folder_size(folder_path):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(folder_path):
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            total_size += os.path.getsize(file_path)
    return total_size


def nfo_gen(name, desc, size):
    return """PkgName = {}
PkgDesc = {}
PkgSize = {}
    """.format(name, desc, size)

def nfo_read(nfo):
    with open(nfo, 'r') as f:
        for line in f:
            if line.startswith('PkgName'):
                nme = line.split('=')[1].strip()
            elif line.startswith('PkgDesc'):
                desc = line.split('=')[1].strip()
            elif line.startswith('PkgSize'):
                size = line.split('=')[1].strip()
        return nme, desc, size

def print_help():
    print(Fore.RED + """Usage: archpkg <command> [options]
              {}update{} [{}aur{}|{}pacman{}|{}flatpak{}] - updates the archpkg
              {}applist{} - lists installed appimages
              {}install <package>{} - installs package
                  install options:
                    {}--appimage{} - installs appimage
                    {}--aur{} - installs aur package
                    {}--pacman{} - installs pacman package
                    {}--flatpak{} - installs flatpak package
              {} pm add options:{}
                    {}--pacmaninstall{} - installs pacman
                    {}--aurinstall{} - installs aur
                    {}--flatpakinstall{} - installs flatpak
              {}remove <package>{} - removes package
                  remove options:
                    {}--pacrm{} - removes pacman package
                    {}--aurrm{} - removes aur package
                    {}--flatpakrm{} - removes flatpak package
            default: aur install
            version: {}
              """.format(Fore.YELLOW, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL,Fore.YELLOW, Style.RESET_ALL, Fore.YELLOW, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.YELLOW, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, Fore.CYAN, Style.RESET_ALL, archpkg_ver))
    sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print_help()
    if sys.argv[1] not in commands or len(sys.argv) < 2:
        print_help()
    cwd = os.getcwd()
    ud_parse = cwd.split("/")
    if sys.argv[1] == "update":
        if len(sys.argv) < 3:
            sb.call(["git", "clone", "https://github.com/automatick/archpkg.git"])
            sb.run("cd archpkg && sh archpkginstall", shell=True)
            sb.call(["rm", "-rf", "archpkg"])
            sys.exit(0)
        else:
            if sys.argv[2] == "aur":
                sb.call(["yay", "-Syu", "--noconfirm"])
            elif sys.argv[2] == "pacman":
                sb.call(["sudo","pacman", "-Syu", "--noconfirm"])
            elif sys.argv[2] == "flatpak":
                sb.call(["flatpak", "update"])
            sys.exit(0)
    elif sys.argv[1] == "help":    
            print_help()
            sys.exit(0)    
    elif sys.argv[1] == "applist":
        for i in os.listdir(f"/{ud_parse[1]}/{ud_parse[2]}/Programs"):
            if i.endswith(".nfo"):
                name, desc, size = nfo_read(f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{i}")
                idk = f"{Fore.CYAN}{name}{Style.RESET_ALL}: "
                print(idk + (" " * (30 - len(idk)) + f"{Fore.YELLOW}{size}{Style.RESET_ALL}"))
        sys.exit(0)
    elif sys.argv[1] == "install":
            if sys.argv[2] == "--appimage":
                sb.call(["chmod", "+x", sys.argv[3]], stdout=open(os.devnull, 'w'), stderr=sb.STDOUT)
                sb.call([f"{cwd}/{sys.argv[3]}", "--appimage-extract"], stdout=open(os.devnull, 'w'), stderr=sb.STDOUT)
                sb.call(["chmod", "+x", "squashfs-root/AppRun"], stdout=open(os.devnull, 'w'), stderr=sb.STDOUT)
                name = False
                for i in os.listdir("squashfs-root"):
                    if i.endswith(".desktop"):
                        ds_name = i
                        dsktp = open('squashfs-root/{}'.format(i), 'r').read()
                        for j in dsktp.split('\n'):
                            if j.startswith('Name='):
                                name = j.split('=')[1]
                    elif i.endswith(".png"):
                        icon_name = i
                if not name:
                    print("Could not find name in .desktop file")
                    sb.run("ls", shell=True)
                    name = input("Enter the package name manualy: ")
                if name:
                    print(f"{Fore.GREEN}Found name in .desktop file: {Fore.CYAN}{name}{Style.RESET_ALL}")
                    dot_ds = dot_desktop_gen(name, f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{name}/AppRun", f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{name}/{icon_name}")
                    sb.call(["mv", "squashfs-root", name])
                    size = f"{(get_folder_size(name) / (1024 * 1024)): .2f} MB"
                    open(f"{name}/{ds_name}", 'w').write(dot_ds)
                    sb.call(["mv", f"{name}/{ds_name}", f"/{ud_parse[1]}/{ud_parse[2]}/.local/share/applications/{ds_name}"])
                    sb.call(["mv", name, f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{name}"])
                    sb.call(["chmod", "+x", f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{name}/AppRun"])
                    with open(f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{name}.nfo", 'w') as f:
                        f.write(nfo_gen(name, ds_name, size))
                    print(f"{Fore.GREEN}Installed '{Fore.CYAN}{name}{Fore.YELLOW}': \n\tSize: {Fore.CYAN}{size}{Fore.YELLOW} \n\tPath: {Fore.CYAN}'/{ud_parse[1]}/{ud_parse[2]}/Programs/{name}'{Fore.YELLOW}\n\tIcon: {Fore.CYAN}'/{ud_parse[1]}/{ud_parse[2]}/Programs/{name}/{icon_name}'{Fore.YELLOW}\n\tDesk: {Fore.CYAN}'/{ud_parse[1]}/{ud_parse[2]}/.local/share/applications/{ds_name}'{Fore.YELLOW}")
                    sys.exit(0)
            elif sys.argv[2] == "--aur":
                sb.call(["yay", "-S", sys.argv[3], "--noconfirm"])
            elif sys.argv[2] == "--pacman":
                sb.call(["sudo","pacman", "-S", sys.argv[3], "--noconfirm"])
            elif sys.argv[2] == "--flatpak":
                sb.call(["flatpak", "install", sys.argv[3]])
            else:
                sb.call(["yay", "-S", sys.argv[2], "--noconfirm"])
    elif sys.argv[1] == "remove":
        if sys.argv[2] == "--pacrm":
            sb.call(["pacman", "-Rsn", sys.argv[3]])
        elif sys.argv[2] == "--aurrm":
            sb.call(["yay", "-Rsn", sys.argv[3]])
        elif sys.argv[2] == "--flatpakrm":
            sb.call(["flatpak", "remove", sys.argv[3]])
        elif sys.argv[2] == "--apprm":
            _, desc, _ = nfo_read(f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{sys.argv[3]}.nfo")
            sb.call(["rm", "-rf", f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{sys.argv[3]}"])
            sb.call(["rm", f"/{ud_parse[1]}/{ud_parse[2]}/Programs/{sys.argv[3]}.nfo"])
            sb.call(["rm", f"/{ud_parse[1]}/{ud_parse[2]}/.local/share/applications/{desc}"])
            print(f"{Fore.YELLOW}Application '{Fore.CYAN}{sys.argv[3]}{Fore.YELLOW}' removed.{Style.RESET_ALL}")
        sys.exit(0)
    if sys.argv[1] in pm_add_options:
        if sys.argv[1] == "--pacmaninstall":
            sb.run(["sudo","pacman", "-Syu", "--noconfirm"])
            sys.exit(0)
        elif sys.argv[1] == "--aurinstall":
            print("Installing yay...")
            if sb.call("yay --version", shell=True) != 0:
                sb.call(['git', 'clone', 'https://aur.archlinux.org/yay.git'])
                sb.call(['makepkg', '-si'], cwd='yay')
                sb.call(["rm", "-rf", "yay"])
                print("Yay installed.")
            else:
                sb.call(["yay", "-Syu", "--noconfirm"])
                print("Yay already installed.")
            sys.exit(0)
        elif sys.argv[1] == "--flatpakinstall":
            print("Installing flatpak...")
            if sb.call("yay --version", shell=True) != 0:
                print("YAY not installed. Please install yay first.")
                sys.exit(1)
            if sb.call("flatpak --version", shell=True) != 0:
                sb.call(["yay", "-S", "flatpak", "discover","--noconfirm"])
                print("Flatpak installed.")
            else:
                print("Flatpak already installed.")
            sys.exit(0)
    print_help()

